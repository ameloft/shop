import logging
from telegram import Update, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(level=logging.INFO)

CATEGORY, BRAND, MODEL, YEAR, CONDITION, PRICE, COMMENT, PHOTOS = range(8)
user_data = {}
CHANNEL_ID = ''  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n–Ø–∫–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø—Ä–æ–¥–∞—î—à? (–∫–∞–π—Ç, –¥–æ—à–∫–∞, —Ç—Ä–∞–ø–µ—Ü—ñ—è...)")
    return CATEGORY

async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text
    await update.message.reply_text("–ë—Ä–µ–Ω–¥?")
    return BRAND

async def brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['brand'] = update.message.text
    await update.message.reply_text("–ú–æ–¥–µ–ª—å?")
    return MODEL

async def model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['model'] = update.message.text
    await update.message.reply_text("–†—ñ–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞?")
    return YEAR

async def year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['year'] = update.message.text
    await update.message.reply_text("–°—Ç–∞–Ω (–Ω–æ–≤–∏–π, –±/—É, —è–∫ –Ω–æ–≤–∏–π...)?")
    return CONDITION

async def condition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['condition'] = update.message.text
    await update.message.reply_text("–¶—ñ–Ω–∞ –≤ —î–≤—Ä–æ?")
    return PRICE

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['price'] = update.message.text
    await update.message.reply_text("–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ (–º–æ–∂–µ—à –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏, –Ω–∞–ø–∏—à–∏ -)")
    return COMMENT

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['comment'] = update.message.text
    context.user_data['photos'] = []
    await update.message.reply_text("–ó–∞–≤–∞–Ω—Ç–∞–∂ –¥–æ 5 —Ñ–æ—Ç–æ. –ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à - –Ω–∞–ø–∏—à–∏ /done")
    return PHOTOS

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photos = context.user_data['photos']
    if len(photos) < 5:
        photos.append(update.message.photo[-1].file_id)
    else:
        await update.message.reply_text("–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏ /done, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
    return PHOTOS

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    caption = f"üìå –¢–∏–ø: {data['category']}\nüè∑Ô∏è –ë—Ä–µ–Ω–¥: {data['brand']}\nüî¢ –ú–æ–¥–µ–ª—å: {data['model']}\nüìÖ –†—ñ–∫: {data['year']}\n‚öôÔ∏è –°—Ç–∞–Ω: {data['condition']}\nüí∞ –¶—ñ–Ω–∞: {data['price']} ‚Ç¨\nüìù –ö–æ–º–µ–Ω—Ç–∞—Ä: {data['comment']}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: @{update.message.from_user.username or '–ù–µ–º–∞—î'}"

    media = [InputMediaPhoto(photo, caption=caption if i == 0 else '') for i, photo in enumerate(data['photos'])]
    await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media)
    await update.message.reply_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token('').build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
            BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, brand)],
            MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, model)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, year)],
            CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, condition)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
            PHOTOS: [
                MessageHandler(filters.PHOTO, photo),
                CommandHandler('done', done)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    app.run_polling()
